"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    # users: [User!]! @paginate(type: "paginator" model: "App\\User")
    # user(id: ID @eq): User @find(model: "App\\User")

    # added by Suman
    books: [Book] @middleware(checks: ["auth:api"])  @all
    book(id: ID @eq): Book @find(model: "App\\Book")
    booksByFeatured(featured: Boolean! @eq): [Book] @all
    searchBookByAuthor(authorName: String!): [Book]
    categories: [Category] @all
    category(id: ID @eq): Category @find(model: "App\\Category")

    me: User @middleware(checks: ["auth:api"]) @auth
}

# added by Suman
type Mutation {
    createCategory(
        name: String @rules(apply: ["required", "unique:categories,name"])
    ): Category @create
    updateCategory(id: ID!, name: String): Category @updateCategoryValidation @update
    deleteCategory(id: ID! @rules(apply: ["required", "exists:categories,id"])): Category @delete

    createBook(
        title: String! @rules(apply: ["required"])
        author: String! @rules(apply: ["required"])
        image: String
        description: String
        category_id: Int! @rules(apply: ["required", "exists:categories,id"])
    ): Book @create
    updateBook(
        id: ID!
        title: String
        author: String
        image: String
        description: String
        featured: Boolean
        category_id: Int @rules(apply: ["sometimes", "required", "exists:categories,id"])
    ): Book @update
    deleteBook(id: ID! @rules(apply: ["required", "exists:books,id"])): Book @delete

}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

# added by Suman
type Book {
    id: ID!
    title: String!
    author: String!
    image: String
    description: String
    featured: Boolean
    category: Category! @belongsTo
}
type Category {
    id: ID!
    name: String!
    books: [Book] @hasMany
}